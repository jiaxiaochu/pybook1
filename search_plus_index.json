{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-04 12:09:47 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L1认识Python/":{"url":"doc/Unit01-初识/L1认识Python/","title":"Python基础","keywords":"","body":"1. 2.Python基础1. 2.Python基础 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-01-31 14:41:37 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L1认识Python/遇见Python.html":{"url":"doc/Unit01-初识/L1认识Python/遇见Python.html","title":"L1遇见Python","keywords":"","body":"1. 遇见Python1. 遇见Python 世间一切，都是为了遇见。 就像冷遇见暖，就有了雨 春遇见冬，有了岁月 天遇见地，有了永恒 而我们，遇见了Python，又有了什么呢？ 这是来自Python打的招呼，希望大家也像Python一样，很高兴遇见它。 遇见Python，就像是遇见一位“新朋友”一样，我们应该是充满喜悦的，而不是惶恐与惊惧。希望大家不要担心，下面由我来带大家一起认识认识我们的新朋友。 先给大家讲两个小故事吧： 新东方的联合创始人，现在的著名投资人王强先生，在下定决心去读计算机专业的研究生的时候曾用亚里士多德的三段论给自己做过这样的证明： 计算机是人发明的东西 凡是人都可以懂人发明的东西 如果我学不会计算机，我不是人 显然，我们都是人，又怎么可能学不会人发明的东西呢？ 第二个故事，就是王强先生在研究生入学面试时的场景 当时王强先生的导师已经做好准备拒绝王强先生的申请，因为在他的老师看来，王强先生不具备任何成为他研究生的资历（Qualification）。北大四年的文科专业，没有修过任何数学课程。也许这位老师也无法想象，面前的这位这样的学生要怎么学习，要怎么毕业？但最终，王强先生的一番话，让他不仅通过了面试，最终也顺利的学成毕业了，那王强先生又说了什么呢？ 王强先生是这么对老师说的： 计算机要想工作，就必须需要运行软件（Software），那软件又是什么呢？一套程序（a set Programs），那用什么来写这个程序呢？编程语言（Programming Language）而王强先生的文科专业恰好是西语专业。 接着王强先生又说到：如果编程语言（Programming Language）如果跟其他语言没有什么瓜葛or关系的话，为什么又要叫它语言呢？既然叫它语言，那跟我们日常所说的话，所掌握的语言那就都是一个门类的，都是一个家族的，能有什么区别呢？如果有，也不过只是方言的区别，就像宁夏普通话和北京普通话的区别而已。因此，不过也就是多学一门语言而已，差不多的。就在王强先生这样的证明中，他最终作为一个文科专业的学生，通过了自己的计算机专业的研究生入学的面试。 就像上面的故事当中所说到的，那么Python也不过就是一种语言，我们已经掌握了一门甚至多门语言，比如，我们日常所说的：好，真棒，用英语，就是“Ok，Nice”；用河南话，就是“中，真不赖”；用广东话，就是“猴，猴赛雷”。 那么用Python呢？就是“Ture，Process finished with exit code 0” 至于为什么，后面就会告诉大家。以及，我们也会一点点的帮助大家，让Python每一次都能对我们说它的那句“好，真棒”，“Ture，Process finished with exit code 0” 在认识了Python不过是一门语言之后，那么，人与人之间的沟通叫“中国话”，那我们与计算机之间沟通，用的又是什么呢？Python语言中的那些“字词句”组成的又是什么呢？（组装和拼接） 程序——Program 程序（Program）这个词，我们听起来非常的冰冷又陌生，但其实它早就在我们的生活中出现过无数次了。下面来给大家看看，我与程序的初见吧～ 我与程序的初见： 这是初中一年级，学习计算器的时候，右边的按键顺序就是我们给计算器写的程序。 而到了高中，在必修三的第一章算法初步中，程序则以框图的形式出现了。 因此，程序，距离我们本就不遥远与陌生。既然我们会给计算器写程序，那么我们也理所当然的能给计算器的哥哥计算机来写程序。 事实上，正如上述第二张图所示，给计算机编程也不过就是像图中那样，从开始到结束，就像代码是从上往下写一样。而在这个自上而下的过程中，也不过是有那么一些需要判断的分支而已。这些在计算机的编程当中，都是一样的。因此，也不必感到畏难和自我怀疑。这一切，没什么好难的。 编程就像按计算器一样，根据左边的任务or我们要解决的实际问题，去组织拼装我们那些按键，像搭积木一样，一点点的把它变（编）成（程）我们想要的样子。让计算机来真正的为我们服务，帮助我们工作、学习和生活。使其为我们所用，做好我们的“工具人”。 那Python当中的“程序”又是什么样的？ 一个比较复杂程序的图，最好能够包含上面的。or干脆就把上面的用程序体现出来。 顺便介绍一下后面要学习的部分基础内容 这当中，我们唯一需要注意的就是程序的序，不得不说，我们中国人的智慧，这“程序”最重要的关键点顺序，直接就体现在了字面上。不像Program，怎么看都感受不到顺序。 既然，编程是一门语言上的学问，以及区别，是方言和方言的区别，那为什么我们学的是Python而不是其他，就像为什么我们主要说的是普通话而不是自己家乡的方言？ 下面，我们就通过对比一下，不同编程语言解决同一个问题的代码量与复杂程度，来认识一下，最简洁的Python语言，这也是为什么坊间流传着“人生苦短，我用Python”的原因。 就用我们前面所看到的，Python向我们打招呼这件事儿举例。在Python中，实现这个，只需要一行代码： print(\"Hello，大家好，我是Python，很高兴遇见你们^_^\") 下面，我们再来看看，在Python当中，用一行代码能解决的问题，在别的编程语言中是什么样的？ /*This is a C Program*/ #include int main() { /* 我的第一个 C 程序 */ printf(\"Hello，大家好，我是C，很高兴遇见你们^_^\" \\n\"); return 0; } /*This is a C++ Program*/ #include using namespace std; int main() { cout /*This is a C# Program*/ using System; namespace HelloWorldApplication { /* 类名为 HelloWorld */ class HelloWorld { /* main函数 */ static void Main(string[] args) { /* 我的第一个 C# 程序 */ Console.WriteLine(\"Hello，大家好，我是C#，很高兴遇见你们^_^\"\"); Console.ReadKey(); } } } /*This is a Java Program*/ public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello，大家好，我是Java，很高兴遇见你们^_^\"\"); } } /*This is a Go Program*/ package main import \"fmt\" func main() { fmt.Println(\"Hello，大家好，我是Go，很高兴遇见你们^_^\"\") } /*This is a PHP Program*/ 这对比，差距一目了然。每天忙来忙去，就够令人头秃的了。写起代码来，那就最好是能少写一行是一行吧。不然人类的进步和发展又是为了什么，工作越做越多吗？ 当然，Python的最大的优势，还不是他的简洁。Python作为一门编程语言来说，对于初学者来说可以算的上是非常友好的了。不需要很麻烦和很复杂的东西，就一样可以get像那些复杂的语言一样具备的编程思维和思想。在解决一般和常见问题的时候，很少的代码量，又可以让我们有更多的时间去吃喝玩乐，和朋友聚聚会，多些时间陪陪家人，当然也可以多出很多的时间给我们自己用来做想做的事情。 最后，在这次初次遇见的结束之前，我们想告诉大家：学习Python就像是人与人之间交朋友，要一步一步的熟悉和了解。同时，Python是相声之外，可以合情合理的使用伦理哏的玩笑，我们可以指着自己写的程序说，这是我写的Python程序，我是它的爸爸or妈妈，它是我儿子。 与此同时，我们也要处理好，我们与它之间的关系，在机器的世界中，我们人所扮演的就是上帝的角色。是我们在控制它，我们在这段关系中，我们始终是强势的一方。同时，编程语言，只是一个工具，而我们通过使用这个工具，最终是要把计算机变成我们的打工人。让它为我们所用，为我们服务。 就像上帝说要有光，所以就有了太阳。 而我们需要让计算机能够帮我们更好更快的处理问题，于是就有了Python。 至于，当我们面对具体问题，又需要Python中的那些东西，组成什么呢？我们留着以后慢慢说。 很高兴遇见你！ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-03 23:45:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L2第一个Python程序/第一个Python程序.html":{"url":"doc/Unit01-初识/L2第一个Python程序/第一个Python程序.html","title":"L2第一个Python程序","keywords":"","body":"1. 第一个Python程序1.1. print指令1.1.1. 1、语法名称1.1.2. 2、语法功能1.1.3. 3、语法格式1.1.4. 4、语法参数1.1.5. 5、参数功能1. 第一个Python程序 在上一讲，我们已经简单介绍了Python编程语言（Programming Language）。现在，我们来一起打开我们的IDE（Integrated Development Environment集成开发环境），来写下我们的第一个Python程序，一起来进一步的了解Python编程语言。 1.1. print指令 当我们在键盘上输入“print”的时候，会看到在我们输入“print”的同时，会有如下提示： print(values, sep, end, file, flush) 这，便是“print”这个指令的语法格式，即：“print”+“()”+括号中对应的内容=print指令 当然，类似于这样的指令，在后面还有很多，以及后面我们也会接触到它们各自专有的名称。这里，我们先通过“指令”这个简单的概念来学习和理解，一起打开Python这扇大门。 当指令出现，对我们来说，新的问题也随之而来，这个指令是什么意思？括号里的东西又能干嘛？通过这个指令，我又能让计算机帮我做什么呢？ 如图所示：print(values, sep, end, file, flush)就是一个标准的语法格式，其中print是语法名称，后面括号中的内容则是语法参数。 我们首先来看： 1.1.1. 1、语法名称 语法名称是什么：语法名称即指令名称，是用来通过程序来告诉计算机，我们需要它为我们做什么样的事情，这个什么样的事情就是与指令名称（语法名称）所相对应的。 一句话总结：语法名称即指令名称，即让计算机干什么就让计算机干什么。 1.1.2. 2、语法功能 语法功能是什么：语法功能即指令功能，计算机通过识别我们给它的语法名称，来执行对应的操作，给我们对应结果。这里，我们以print为例来向大家介绍，语法功能。 print，顾名思义，就是“打印”的意思，这里不同于我们日常概念中的“打印”，日常概念中 是通过打印机，把文档，打印到纸上 而在计算机中 则是通过程序，把值(values)，打印到指定位置 综上所述： 我们的“程序”=现实世界中的“打印机” 我们的“值(values)”=现实世界中的“文档、图片等任何需要打印（输出）的东西” 我们计算机中的“指定位置”=现实世界中的“纸” 那么在程序中，print的“值(values)”和“指定位置”又是什么呢？ 如图所示，当我们在写好代码，点击右上角的绿色箭头按钮之后，则会在下方出现“Run”界面，也就是常说的“控制台”or“终端” 这里的Run界面中的“控制台”or“终端”，便是我们print在计算机中的“指定位置” 控制台or终端，是在学习编程初期中计算机与我们主要的“沟通”窗口。我们将在程序中，告诉计算机需要它帮我们做什么。而它帮我们做的结果，在学习编程的初期主要体现在控制台or终端中。 1.1.3. 3、语法格式 当我们确定了名称与功能之后，我们又该怎么写，才能让计算机准确无误的帮我们实现我们的想法呢？这就要看我们如何应用我们的“标准语法格式”了。 在这之前，我们首先要明确，标准语法格式是一种标准，是这个语法尽可能的能够做什么的一种体现。因此，在实际的应用过程中，我们不必完全照搬，只用根据我们的实际需求，选择适合我们的参数便可。 如上图所示，应用语法or后面我们会提到的“调用”，就是在代码行中输入我们的“语法名称（指令）+与该语法名称对应和我们实际需求相关的“语法参数”。 说到这里，我们的第一个程序也就呼之欲出了。 首先：我们需要让计算机做什么？给我们打个招呼，说一句话——“Hello，大家好，我是Python，很高兴遇见你们^_^” 那么我们要怎么实现呢？ 目前我们已知：print指令，可以将我们想要的“值(values)”输出到特定位置“控制台” 那我们就可以通过print指令，让计算机在控制台，把我们那一句“Hello，大家好，我是Python，很高兴遇见你们^_^”给输出出来 因此在实际的应用过程中，我们想要实现上述想法，所需要编写的程序就是： print(\"Hello，大家好，我是Python，很高兴遇见你们^_^\") 当我们编写好程序之后，便可以点击右上角的箭头，然后在左下方看到如下图所示内容： 大家也可以试试，根据print指令，让计算机用我们各自的方言说出“好，真棒”以及其他我们想让计算机说（输出）出来的话。 1.1.4. 4、语法参数 我们已经顺利的，写出了我们第一个程序。不知道大家有没有尝试着让计算机用我们各自的方言说出“好，真棒”以及其他我们想让计算机说（输出）出来的话呢？ 大家一定好奇，在标准语法格式中括号中有很多内容，如：values，sep，end，file，flush。为什么实际应用当中，我们却只用通过“”双引号，并在双引号中间像做填空题一样，填入我们的内容就好了呢？这中间即没有出现“values”也没有出现“sep”，那为什么还是可以运行呢？ 这就不得不提到语法参数了。语法参数，顾名思义，就是相应语法所对应的参数。而我们前面，通过在“”双引号中填入我们想要的内容，则就构成了与语法参数中“values”所想对应的参数值。因此，像“values”、“sep”、“end”、“file”和“flush”都是参数名称，而像： \"Hello World\" \"Hello，大家好，我是Python，很高兴遇见你们^_^\" \"好，真棒\" 这些，则都是“values”这个参数所对应的“参数值”。 这里需要注意的是，像“values”和“sep”这样的参数名称是唯一的。与之对应的是唯一的“参数功能”。而与“参数名称”所对应的“参数值”则可以是不同的。我们只需要去匹配相应的“参数名称”与我们所需要用到的“参数功能”给定对应的“参数值”即可。这个，我们也将会在后续的编程过程中有应用。 1.1.5. 5、参数功能 再了解了语法参数后，我们再来看看与语法参数们所对应的参数功能以及其他的参数： values 表示要输出的值，可以是数字、字符串、各种类型的变量等。 sep 表示打印值时，各个值之间的分隔符，默认值是一个空格，可以设置为其他的分隔符。 end 表示打印完最后一个值需要添加的字符串，用来设定输出语句以什么结尾，默认是换行符“\\n”，即打印完会跳到新行，可以换成其他字符串，如end'\\t'或end' '等，以实现不换行输出。 但看文字也许并不那么的直观，我们不如在我们的IDE（Integrated Development Environment集成开发环境）中来看看。 例1: values，这里我们先不考虑上文中，所提到那些“字符串”和“变量”我们尚且陌生的概念，相关的讲解在下一讲。我们还是先看我们前面用到的“Hello，大家好，我是Python，很高兴遇见你们^_^”这句话，在我们的第一个程序中，我们也可以观察到，最终，在Run界面的“控制台”中，最终是将 Hello，大家好，我是Python，很高兴遇见你们^_^ 这句话打印出来了。因此，在目前，我们的值所对应的，就是双引号之中的内容。我们可以在练习的过程中，尝试在双引号中输入不同的我们所想要的值，来进行尝试，让Run界面的“控制台”按照我们的想法输出各种我们想法中所需要的值。 例2: sep，废话不多说，先上代码，再上图。请大家注意观察&#x1F440; print(\"Hello，大家好，我是Python，很高兴遇见你们^_^\") print(\"Hello\", \"大家好\", \"我是Python\", \"很高兴遇见你们^_^\", sep=None) print(\"Hello\", \"大家好\", \"我是Python\", \"很高兴遇见你们^_^\", sep=\"，\") print(\"Hello\", \"大家好\", \"我是Python\", \"很高兴遇见你们^_^\", sep=\"\\n\") 其中当sep=None的时候，sep参数的参数值为默认值，即表中所提到的，一个空格。 我们可以先根据表中所说的，来闭着眼睛3秒钟，想象一下，会是什么样？跟第一个我们已经见过的有什么不同？ 我们直接来看结果吧： 第一行代码 第一行代码跟我们前面写第一个程序的时候是一模一样的，因此还是“一样的配方一样的味道”“一样的代码，一样的结果”它是不会因为后面多写了几行而改变的。 第二行代码 第二行当我们加入sep参数，且sep参数值为默认值（一个空格），因此，如图所示，我们能明显的看到，这些值与值之间，像参数功能表中所描述的一样，每个值都用sep参数功能的默认值，即一个空格，被分隔开了。 第三行代码 而第三行，当我们把sep的默认值改成我们想要的“，”逗号时，它的结果便跟第一行代买的结果一致了，为什么我们要用“，”逗号呢？因为它们的差别就是一句话中的段与段之间用“，”逗号分隔开的，第一行代码有逗号分隔，第三行代码在sep参数之前，它们的分隔之间没有逗号。我们在第三行通过sep参数给它加上，最终第三行的代码就跟第一行一样了。 第四行代码 到了第四行代码，前面的值还是一样，这次我们把sep参数的分隔符换成，“\\n”反斜杠n，换行符，前面的值在进行分隔时，即没有像第二行那样，用默认值（一个空格）那样进行分隔，也没有像第三行中那样用“，”逗号来分隔。而是根据我们的想法中所给定的“\\n”换行符来进行分隔的。因此，我们能够非常直观的观察到，它们的每一次分隔，都换了一行。 ⚠️注意： 当我们不明确给定一个sep参数的参数值时，它的“运行”结果是默认值。也就是说，当我们不在指令后面的“()”括号中，输入or给定sep参数的参数值时，它的默认值是一个空格，废话不多说，先上代码，再上图。大家好好观察一下哟～ print(\"Hello\", \"大家好\", \"我是Python\", \"很高兴遇见你们^_^\") 尽管一个指令，可能会有很多种语法参数，我们只需要知道有很多种就够了。在一般常用的编程实践中，我们所用到的都是像我们第一个程序中的那样，简单基本的东西。 print(\"Hello，大家好，我是Python，很高兴遇见你们^_^\") 那些语法参数，更多的功能和意义是在当我们需要实现复杂需求时有可以帮我们用来简单实现的方法。因此就像“具体问题具体分析”一样，我们编程时也要“具体需求具体分析”，在不需要那些更多的语法参数来帮助和辅助我们实现想法时就可以暂不考虑，不用过度的为难自己哟～ 以上就是这一讲的全部内容，不知道目前大家感觉如何。从这一讲开始，我们便正式开始了我们的编程生涯。有没有很酷很不一样呢？&#x1F60E; 这一讲，除了让大家能够写出第一个Python程序，以及简单的通过了解print指令，了解编程中的语法、语法功能、语法格式、语法参数、参数功能之外。 更希望大家能够体验到，编程并不难，我们只需要根据我们的想法，找到对应的指令，并按照对应的指令的语法格式，参数等，对代码进行组装和拼接，就可以了，就可以让计算机帮我们做出我们想要的结果了。所以编程并没有想象当中的那么难。不过目前，一切都才只是刚刚开始，革命尚未成功，同志仍需努力。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-03 23:45:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L3输入输出/输入输出.html":{"url":"doc/Unit01-初识/L3输入输出/输入输出.html","title":"L3输入输出","keywords":"","body":"1. 输入输出1.1. 你妈喊你回家吃饭1.2. 输出1.2.1. 1、输出：字符串，即文本内容，字、词、句、中英文、标点符、特殊符号等组成的文本（字符串）内容。例如我们前面用来打招呼的那句话。1.2.2. 2、输出：数字与算数式1.2.3. 3、输出：变量1.2.4. 4、输出：输出内容到文件1.3. 输入1.3.1. 程序中的自我介绍1. 输入输出 在上一讲，我们已经为大家讲解了如何编写第一个Python程序了。也简单的了解了，print指令。这一讲我们将继续深入，来学习更多的Python编程语言的内容——输入输出。 1.1. 你妈喊你回家吃饭 微信聊天，是我们常见的场景。这个聊天的界面，就像是我们“Run界面”的“控制台”。喊我们吃饭的消息，发过来之后，需要被打印出来，显示给我们看，同时，我们的回复，也要被输入进去，发送过去。入下图中所示： 这就是我们的“输入输出”最常见的，基本的应用。 当然，我们日常还会见到很多，各种各样的输入输出。 比如：我们登陆微信、QQ、邮箱等，很多东西，我们需要输入我们的用户名和密码。不然计算机怎么知道我们是谁呢？ 我们日常也会接收到很多的信息，也会在各种各样的界面被输出（打印）出来，如：收到的短信，要在短信界面被输出（打印）出来；收到的微信，也要在微信的界面被输出（打印）出来。不然，总有一个消息提示，而不知道是什么的感觉，多么的让人难受呀～ 下面，我们具体的来看看 先从我们已经见过的，有了一定了解的print——输出，说起吧。 与我们日常所熟悉和了解到的不同，看似我们的手机和电脑，能够非常智能和自动化的帮我们处理很多的东西。实际上这都是“程序猿”们写出的“程序”的功劳。我们的计算机和手机本身是很傻也很笨的，如果不运行程序的话，用低情商的说法：它们就是一块砖头。高情商的说法呢：它们就是闷骚，喜欢但不说。 就像微信聊天时，如果不把收到的信息print出来，它就算是收到了别人给我们的信息，它也不会给我们看的傻子。 因此，为了不让计算机这么傻，让它把东西给我们体现出来，给我们看到，我们这个时候就会需要print。 说了这么多废话，不知道大家感受如何，不过下面又到了我们的传统艺能环节， 废话不多说，先上代码，再上图，大家要开始注意观察了： # 程序已经收到了信息 msg1 = \"饭点啦\" msg2 = \"快回家吃饭了\" 这个时候我们不print，会是什么结果呢？ 看，什么都没有，空的～ 哇哦，错过母亲大人的信息，她可是会发飙的，啊～怎么办怎么办～该死，为什么明明已经收到了消息，却又不告诉我是什么呢？ 就像前面说的，我们单纯的计算机和手机，在没有我们“程序猿”写的程序的加持之下，它就是一块砖，一个傻子。因此，在这种时候，我们光让计算机收到信息还不行，还得让它给我们展示出来，不能整个貔貅，只进不出呀。这个时候，我们就要用到我们的print了。话不多说，先上代码，再上图。 # 程序已经收到了信息 msg1 = \"饭点啦\" msg2 = \"快回家吃饭了\" # 快把消息放出来！ print(msg1) print(msg2) 上图！ 看，现在，我们就通过我们写的程序，让计算机把它收到的消息展现给了我们。在我们的智慧的加持下，它似乎也没有那么笨蛋、那么傻了呢！对不对！ 然后，捎带手的让我们复习一下前面一讲的内容。 上一讲，我们提到了print的语法格式的语法参数中，不仅仅有values，还有什么？还有一个sep参数，对吧。作为一个成熟的编程语言Python，怎么能让我们展示个消息，还写两行，相似度非常高的代码呢？毕竟“懒”才是第一生产力。那么作为一个成熟的编程语言，也自然应该能让我们“懒”，当然，懒不是目的，帮助我们省事，提高效率才最重要。还是话不多说，整活！先上代码，再上图： # 程序已经收到了信息 msg1 = \"饭点啦\" msg2 = \"快回家吃饭了\" # 快把消息放出来！ print(msg1, msg2, sep=\"\\n\") 上图： 看，是不是代码少写了一行，但实现的效果完全一样呢？ 这，其实也是存在那么多语法参数的意义。不然又何必存在呢？单纯的为了占地方嘛？哈哈哈，因此，就像前面说过的： 更多的功能和意义是在当我们需要实现复杂需求时有可以帮我们用来简单实现的方法。 那些语法参数虽然多，但看在它们能够帮我们提高效率，能让我们“懒”的面子上，所以，还是要尽可能的去熟悉和了解的。 1.2. 输出 前面，我们已经通过各种各样的应用，给大家展示了一些关于输出的基本应用。 现在，我们来正式的说一说它吧——print()，输出 print()，在学习Python的初期，将会是我们经常用到的“指令”，常用于输出程序的结果。在我们尚未熟练和深入掌握一些Python技术和手段之前，print()，将是我们主要获得和了解计算机和我们所写的程序情况和状态的工具、手段和方法。在学习Python的初期，万物皆可print，也经常都需要print。 因此，尽管print()相对其他内容简单，但我们还是要重视它。 在上一讲，我们已经介绍了print()的基本用法和基本的语法格式。下面我们将来放在具体的实例当中，看看理论与实践。 我们跟编程，是为了让计算机帮我们给我们一个结果。就像在前面的例子当中所说的那样，如果我们不主动让程序打印出结果，程序是不会主动打印出来的。那么程序，都能打印出什么结果呢？——看我们的编程所需要解决的问题。 我们先来看看print都能输出or给出我们哪些结果。也就是说看看print都能输出些什么。 首先，我们要明确，print能输出的必须是计算机or程序里有的，没有的则不在print的输出范围。 然后，我们再来看看print都能输出些具体的什么。 1.2.1. 1、输出：字符串，即文本内容，字、词、句、中英文、标点符、特殊符号等组成的文本（字符串）内容。例如我们前面用来打招呼的那句话。 例1.1：一句名人名言 我们日常的信息交流与沟通，都是通过文字和文本，因此，我们就来先通过程序，把我们日常的一句话or名人名言，给讲出来吧&#x1F60A; print(\"Go big or Go Home, 要么出众，要么出局\") 如图所示，计算机通过我们的程序把我们想让计算机和程序表达出来的信息表达了出来。 例1.2：在表格里我们要插入的日期 我们有时会需要在表格or文件当中插入日期，怎么办呢？我们也一样可以用print给它们打印出来。后面我们的学习，也会有如何把我们想要的内容（指定内容）添加到我们想要它们出现的位置（指定位置），甚至还可以按照我们想要它们出现的形式（指定形式），我们先来看看如何简单的把它们打印出来吧。 print(\"2021\", \"06\", \"26\", sep=\"-\") 如图所示：这样我们就把一个日期打印出来了。 例1.3：一条提示信息 当然，有的时候，我们也需要我们的程序，对外发出一些提示信息，以告诉我们程序执行到了哪一步或发生了什么，我们也可以用print把它输出出来。 print('您的双十一购物车已被清空') 如图所示：我们就把一条提示信息给发出来呢。当然，这也算是一个技巧，后面，我们编写的程序会在量上有很大的增加，现在我们一个程序还只做一步的事情，后面我们一个程序会做很多个步骤的事情，我们便可以在每一步结束的时候，print一下，告诉我们程序的执行情况。 1.2.2. 2、输出：数字与算数式 例2.1：圆周率π的近似值 当然，我们日常传递的信息当中，除了文字，还有数字。Python同样也是可以处理的，我们来一起看一看吧&#x1F60A; print(3.1415926) 如图所示：这样Python就把数字输出出来啦&#x1F389; 例2.2：算数式 当然，小时候那些令人捉急的数学题也不在话下 print(1*2*3*4*5*6*7*8*9*10) 如图所示：现在我们只需要把式子输入到程序当中，一运行（Run），就能秒秒钟得到答案啦！&#x1F386; 例2.3：我爱你3000遍 还记得钢铁侠的那句我爱你3000遍嘛？要是我们自己说，可要说到天荒地老了，但现在用Python，也可以很快的解决，不信，你看！ print(\"我爱你\" * 3000) 如图所示：满满一屏幕，全是，要是有兴趣可以自己数一数够不够三千遍哟，要是上学时，老师的罚抄能这样，那可轻松了不少呢，&#x1F436;！ 1.2.3. 3、输出：变量 后面，我们将会学习变量，但变量也是要输出出来的，这里仅做简单的演示 例3.1：我爱你3000遍 由于还没有学习到变量，我们这里先来简单了解一下 a = \"我爱你\" #设立一个变量a，并给a赋值 b = \"3000\" #设立一个变量b，并给b赋值 print(a + b + \"遍\") #根据变量a与b的值，结合print技术的手段与方法输出“我爱你3000遍” 如图所示：这就是将前面的文本变量化之后的输出，当然，这一次print后面的括号里的写法尽管不同，但出来的结果，还是跟输出\"我爱你3000遍\"是一样的。 1.2.4. 4、输出：输出内容到文件 后面会专门讲文件操作，这里只先演示print的应用 例4.1：把程序结果保存为文件 fp = open('test.txt', 'a+') #以读写的模式打开test.txt文件，若文件不存在则新建文件并打开 print(\"我爱你三千遍\", file=fp) #将“我爱你三千遍”写入到文件中去 fp.close() #保存并关闭文件 看图： 什么都没有&#x1F631;！ 别急，别慌，虽然这里没有，是因为我们的程序并没有在这里输出什么，看下一张图： 虽然控制台里什么内容都没有显示，但是在文件栏里却多了一个跟我们在代码里写的那样的文件（test.txt），我就快打开来看看吧&#x1F609; 看，我们想要输入到文件中的那句话，就被输入到文件里了。意不意外，惊不惊喜&#x1F60E; 以上，就是输出基本且常见的效果，下面我们来具体讲讲print的在编程过程中的写法： 1.我们先在代码编辑栏中，输入p-r-i-n-t这个五个字母，这是语法名称or指令名称，通过print，告诉计算机，在这里要执行什么样的操作。 2.我们在输入完语法指令的单词之后，还要注意，并没有结束，完整的语法结构还一对括号。即如下所示： print() 这才是一个完整的print。 3.在输入好一个完整的print指令的语法格式后，我们还需要把我们要让计算机通过我们的程序所打印的参数像我们前面那样写进去。多个参数之间，还要用“,”逗号分隔（在输入算术式的时候用算术符号即可，不用再加逗号）。好让计算机能知道，我们这是多个参数。文本（字符串）类的参数，要用\"\"双引号或''单引号引起来。最后，我们还需要注意的是：不论是括号，逗号，双引号，单引号，在程序中、代码中，都是英文格式下的半角形式。否则，程序将会出现Bug，不会被执行。 如何区分半角和全角符号： ，“”‘’。. ，,“”\"\"''‘’ ，, “”\"\" ‘’'' 。. 首先，它们形状不同，其次就是，它们占的位置也不同，全角的占的位置大，半角的占的位置小。 我们也可以通过一个简单的方法来检测：当我们输入。句号是，是中间是空心圆的句号的，则说明我们的输入法或输入模式在全角状态下，如果我们输入的句号是个.点、是个句点，那么我们的输入法或输入模式则在半角状态下。 以上，就是关于输入的基本基础的内容，大家也可以按照例子，在自己的电脑上，进行编程的练习，写一写，运行运行。也可以发挥自己的想象力，把例子中的内容改一改做出自己练习来。要多多练习哟！加油鸭！ 1.3. 输入 在程序的运行过程中，如果我们想要进行一些“互动”，例如，在程序运行的过程中，给它输入一些信息，那我们应该要怎么办呢？这个时候，我们Python的input语法，就该上场了。我们先来看看它在程序里的样子吧： 1.3.1. 程序中的自我介绍 还是我们的传统艺能：先上代码，再上图 name = input(\"你好呀，我是Python，很高兴认识，你叫什么名字呀？\") school = input(\"你来自哪个学校呀？\") sex = input(\"你是帅哥还是小仙女呢？\") print(\"欢迎来自\" + school + \"的\" + sex + name) 运行的结果如下： 当我们的程序当中出现了input，我们就可以在代码运行的过程中，在运行的对应位置上，进行我们的输入操作。 当有了input之后，我们就可以完成一次，跟程序完整的“互动”了。 下面，我们再来简单的介绍一下关于input输入，这将是我们学习Python所接触到的第二个语法名称（指令名称）。 当我们在输入input之后，Pycharm会给我们如下提示： input(__prompt)，便是input的标准语法格式，像我们之前学过的print一样，input就是语法名称（指令名称），而后面的括号，就是input语法的语法参数，我们可以看到上图的提示中括号里的内容为“__prompt”，prompt即是提示，input主要的参数，便是我们需要提示输入时的提示语。直接在括号中，用双引号把我们要说的提示输入的提示语输入进去即可，如下述代码所示，这样，一条input指令，就让我们写好啦。 input(\"这里输入提示语\") 但这里只是输入，如果我们要是想把输入的内容保留下来，方便程序内下面的代码使用，就需要通过声明变量的方式，用变量将输入的结果存起来。至于怎么使用变量，我们后面再将。以上，就是关于输入的基本内容。大家要多多练习哟！加油鸭！ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-03 23:45:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L4注释的使用/注释的使用.html":{"url":"doc/Unit01-初识/L4注释的使用/注释的使用.html","title":"L4注释的使用","keywords":"","body":"1. 注释的使用1.1. 从上一讲的一个例子说起1.2. 1、单行注释2. （注释内容）2.1. 2、多行注释2.2. 3、文本声明注释1. 注释的使用 在上一讲，我们已经为大家更进一步的讲解了Python编程语言，学习了输入输出在Python中的编程写法。这一讲，我们来继续了解更多的Python编程语言的内容——注释的使用。 1.1. 从上一讲的一个例子说起 不知道大家还是否记得，在上一讲中，有一个示例代码中出现了不一样的东西，上代码！让我们来康康！ a = \"我爱你\" #设立一个变量a，并给a赋值 b = \"3000\" #设立一个变量b，并给b赋值 print(a + b + \"遍\") #根据变量a与b的值，结合print技术的手段与方法输出“我爱你3000遍” 在每一条指令之后，出现了不一样的内容，而且还都是我们先前给出的标准语法格式中，所没有的内容。那这些是什么呢？ 也许大家已经从内容上猜到了，这不就是对前面的代码的说明嘛！ 大家猜的没错，对，就是对前面代码的说明，说明前面的代码是要做什么的，怎么写的。这就是我们编程过程中需要了解、知道，并会使用的新元素——注释。 注释：是指在代码中，对代码功能进行解释和说明的标注性和解释性的文字，可以提高我们代码对编程人员的可读性。注释部分的内容将在Python程序运行的过程中被计算机忽略，不会影响程序执行的结果。仅用于提高代码对编程人员的可读性。 当我们的代码量上来以后，周期变长以后。我们往往需要回顾以前的代码，甚至在多人协作的工作中，我们要用别人的代码。如果没有注释，我们将不得不通过我们很强的Python能力去进行阅读，有的时候甚至还要猜为什么要这么写代码。大大的影响了我们的阅读代码的效率和质量。因此，在这个时候，我们就需要在编程的过程中，对我们的程序进行注释，以便于后期对代码的阅读和其他操作。 在Python编程语言中，注释通常分为3种，分别是“单行注释”、“多行注释”和“文本声明注释”。下面我们就来分别学习和了解一下这三种注释： 1.2. 1、单行注释 单行注释语法如下： 2. （注释内容） 单行注释，故名思义，就是在单独的一行对代码进行注释。在编程过程中，使用“#”井号作为单行注释的符号。从“#”井号开始，直到换行为止，后面的内容都将作为注释出现，并在程序运行的过程中被忽略（不影响程序的运行）。 在应用中，单行注释可以放在要注释的代码的前一行，即： # 输出“Hello World” print(\"Hello World\") 也可以放在要注释的代码的右侧，即： print(\"Hello World\") # 输出“Hello World” 以上都是正确的写法，都是可以的，根据自己的习惯来使用。 2.1. 2、多行注释 多行注释，顾名思义，就是在一行不够完成我们的需要注释的需求，故而有了一种多行注释的方法。在编程过程中，我们需要在注释开始的起始行和结束行，分别用三个单引号或双引号，对我们多行注释的内容进行标注。 在应用示例如下： ''' 本程序将仅限于使钢铁侠拿到六颗无限宝石 美国队长、雷神等使用本程序将无效 特此说明 ''' 或 \"\"\" 本程序将仅限于使钢铁侠拿到六颗无限宝石 美国队长、雷神等使用本程序将无效 特此说明 \"\"\" 以上两种写法都是正确的应用，具体写作时，可以根据自己的习惯来进行选择。 2.2. 3、文本声明注释 为了便于大家的理解，我们先来看两张图： 上面的文件内容全是乱码，以及上面还有红色提示框，里面的内容是： file was loaded in the wrong encoding:'UTF-8' 文件以‘UTF-8’编码方式载入出错。 如提示内容所述：文件的载入时的编码方式错了。 我们再来看，后面的蓝色提示是什么？ 让我们以‘GBK’的编码方式重新载入，或者把我们的IDE的编码改成‘GBK’，或者通过别的编码重载。 种种情况，都说明了，我们的编码出现了问题。 在这里，我们需要注意一下，这个新出现的概念，“编码方式”。 所谓编码方式，就像我们日常说话一样，比如说“我爱你”，是用什么语言来说。 如：同样都是“我爱你”，用不同语言表达如下 我爱你 # 中文 I Love You # 英语 Je t’aime # 法语 Ich liebe dich # 德语 Ti amo #意大利语 英语还好，但是当我们看后面的法语、德语、意大利语的时候，如果事先说明，我们是否就不知道其意思，同样的东西对我们来说就相当于“乱码”。原因就在于我们不懂法语、德语和意大利语，我们不具备对法语、德语和意大利语的解码的(decoding)能力，因此就自然看不懂通过法语、德语和意大利语编码（encoding）后的“我爱你”了。 对于计算机和程序来说也一样。UTF-8的搞不懂GBK的，GBK也同样搞不懂UTF-8的。UTF-8只能搞懂UTF-8的，GBK也只能搞懂GBK的，就像当我们用GBK编码重新打开上面刚才乱码的文件，就会看到下面的样子： 我们所认识的“我爱你三千遍” 为了防止不同的计算机和程序环境，在运行我们的程序的时候，不认识我们的程序，像我们在最开始一样看到乱码，因此，我们就需要在我们的程序开头加上“文本声明注释”以在程序的一开头，就告诉计算机，我们是用什么编码写的好让计算机看的懂我们的代码。 具体的注释方式如下： # -*- coding:编码 -*- 或 # coding=编码 上述代码中“编码”在实际应用过程中用对应的编码名称代替，如下： # -*- coding:utf-8 -*- 或 # coding=utf-8 以上就是关于三种注释的基本内容。大家要多多练习哟！加油鸭！ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-03 23:45:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L5变量类型初步/变量类型初步.html":{"url":"doc/Unit01-初识/L5变量类型初步/变量类型初步.html","title":"L5变量类型初步","keywords":"","body":"1. 变量类型初步1.1. 变量1.2. 数字类型1.2.1. 整数(int)1.2.2. 浮点数1.2.3. 复数1.3. 字符串类型1.3.1. 转义字符1.4. 布尔类型1.5. 类型转换1. 变量类型初步 1.1. 变量 在Python编程语言中，变量更像是一个“名字”，一个“标签”。当然，也有将变量比作“容器”的。这里，不管哪种说法，都对，只是侧重点不同。变量，在编程语言中作为一个系统的抽象概念，分别具有一下三个基本属性：1、变量名称。2、变量类型。3、变量值。前面的“名称”与“标签”的说法，更侧重强调变量的名称属性。而“容器”则更侧重强调变量的类型与值的属性。 因此，在我们观察变量时，一般要注意，在变量定义时的样子。那么又如何来定义一个变量呢？ 在Python中，我们通过“=”等号来定义变量，如下所示： 变量名 = 变量值 在应用中则为： age = 18 就这样，我们就把我们的年龄这个数字值，通过中间的“=”等号，放在了一个变量名称为“age”、“a-g-e”的容器中去了。即我们给一个名字为“age”的变量，赋了一个为“18”的值；我们也定义or声明了一个值为“18”，名字为“age”的变量。 但是，为什么要有变量值呢？为什么又要将变量值放进一个带有“名字”和“标签”的容器中去呢？ 首先，不论是我们的计算机，还是我们的手机等一切智能设备的运行，以及我们一切在这些设备上所实现的一切功能和操作。例如：发微信，看视频，玩游戏，数据分析，人工智能，等等，都是针对于数据和信息的操作。而数据和信息，都是以值（value）的形式存在的。比如，我们年龄的数据（信息）它所对应的值，就是一个具体的数字；我们的名字的数据（信息）它所对应的值，就是一个具体的字符串。但是，我们要怎么把这些具体的值，告诉计算机呢？又怎么让计算机把它知道那些值告诉我们呢？不知道大家还记不记得，前面我们在讲注释的时候，有编码和解码的概念。那么“定义变量”or“声明变量”就是在把我们的“值”进行编码，按照计算机能够解码的形式进行编码。我们把我们的值，放在一个有特定名称的容器里，告诉计算机，计算机打开这个容器，就解码获得了我们想要告诉它的值了，并且，我们还通过我们给这个容器所起的“名字”or“标签”，即变量名称，告诉了计算机这个值是关于什么的值。当然，也通过，值和名称，以及有“=”等号参与的“定义”与“声明”过程，告诉了计算机，这个值or变量的变量类型or数据类型。 就这样，在这些被人们按变量名称装好的变脸值，被传递来，传递去，就构成了我们的智能世界。我们把一个确定下单和支付成功的“值”给淘宝卖家，它们把我们想要的商品给我们快递到家；我们把饱含爱意和情谊的信息的“值”通过微信传递给我们的爱人和朋友，我们的爱情和友谊也变点更加长情和深沉；我们把我手指间对英雄的操作的“值”在王者荣耀中传递，便就成功的对对面的英雄a出了最后一下，给予最后一击完成五杀。 因此，什么是变量，这就是变量。在说完，变量的名称与值，以及它们的定义与赋值。我们再来说说它们的一些基本的类型。 1.2. 数字类型 我们玩游戏时，我们的金币是用数字记录的，它的多少决定我们是否要回城，是否能买什么样的装备；我们在网上购物时，各种商品价格也是用数字记录的，它们之间的累加的结果，就是我们要花出去钱的数额；大到我们微信支付宝里的余额，小到发了一条朋友圈被点了多少个赞。这些，都是数字。可以说，我们的生活中数字无处不在，同样，我们的智能设备上跑的程序中，数字也无处不在。因此，在编程语言中的变量类型里，也就有了数字类型。 在Python编程语言中，我们简单的把常用的数字类型分为了三种，即整数、浮点数和复数。 1.2.1. 整数(int) Python编程语言中的整数与我们日常接触和理解的整数是一样的，即没有小数点非0开头的数字们。这里不用疑惑&#x1F914;，再是编程语言，也是我们人类发明的，也是为我们人类而服务的，因此，它总是需要跟我们人类世界有相通的地方。 整数包括正整数、负数和0。并且不同于其他的编程语言，在Python中，我们不用考虑很多，所有的数字都可以不限制位数和大小，都通过一个类型来进行处理。就是这么的简单。 例如： 31415926535897932384626 66666666666666666666666666666666666666666666666666666666 -2021 0 如以上这些数字，只要没有小数点，只要我们需要，我们便都可以把它作为值存进我们起好名字的变量里去，谁还不希望自己的支付宝余额永远是9开头的且有很多位呢&#x1F609;。 zhifubaoyue = 9999999999999999999999999999999999999999999999999 这样，我们就把这么大的一个数字，存进了一个叫“zhifubaoyue”的变量中去。要是真的该多好。哈哈哈，不过这里我们需要注意，当我们把一个整数，存进变量名去之后，按照前面所讲过的，我们就定义了一个名叫“zhifubaoyue”的变量，它的值为一串让我们巨爽的“整数”。那么它的变量类型是什么呢？正是我们这里所说的整数（int）。至此，我们便完整的认识了一个变量，及其三个基本属性：1、变量名称。2、变量类型。3、变量值。具体如下图所示： 而，变量类型，则是根据变量值来决定的，如图中的变量值，那么该变量的变量类型则为：int（整数） 1.2.2. 浮点数 在了解了整数之后，我们再来看看数字大家庭中的另外一位兄弟：浮点数。也就是我们常说的小数。例如：1.414、-1.024、0.5、3.1415926等，像我们日常的身高，体重，等等，这些都算是浮点数。 例如：著名篮球运动员科比的身高(单位:m)和圆周率Pi取小数点后七位 kobeHeight = 1.98 pi = 3.1415926 这里，和前面的整数一样，“=”等号左边是变量名称，右边是变量的值，而变量的类型根据变量的值来决定。这里，它们的值都是小数，那么它们的变量类型则为：float（浮点数） 1.2.3. 复数 为了方便一些科学计算，Python中也有复数，这里我们仅作了解。 在Python中，复数跟我们现实中一致，复数由实部和虚部两部分组成，并用j表示虚部。例如：一个复数的实部为3.14，虚部为12.5，那么在定义时如下进行赋值： a = 3.14+12.5j #定义一个值的实部为3.14，虚部为12.5，变量类型为复数，变量名称为a的变量 print(a) #打印这个复数变量 print(type(a)) #打印这个变量的变量类型 如图： 以上就是复数的使用方法。我们这里仅作简单了解。 1.3. 字符串类型 我们常见的如：“江南皮革厂倒闭啦”这样一句话中，每一个字，就是一个字符。当它们连起的时候，就是一个字符串。如果只有一个字，例如：“我”。那就时只有一个字符的字符串，这里不用考虑太多，毕竟Python语言不像其他语言那么复杂，你不必为了一个字符的情况，单独记忆一种变量类型。像“Python”，这其中每一个字母也是一个字符，出现在一起的时候也就是一个字符串。 在上图中，当一段文字，既有中文，也有英文，还有各种标点符号时，它们也算作是一个字符串。 在Python编程语言中，每一个字母、汉子、符号等都算作是一个字符，当它们以任意单个出现or多个以任意排列和组合的形式出现时，它们都可以算作是一个“字符串”类型的“值”。 装着这个值的变量的变量类型则为：str（字符串） 例如： a = \"Python由荷兰数学和计算机科学研究学会的Guido van Rossum于1990年代初设计，作为一门叫做ABC语言的替代品。Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。\" print(a) #输出变量a的值 print(type(a)) #输出变量a的变量类型 上述代码的运行结果为： 最后，需要注意的是，字符串类型的值在对变量进行赋值时，要将字符串的值用“”一对双引号or‘’一对单引号括起来，以告诉计算机，这个值的类型是字符串。 这个时候，新的问题就来了：如果要是想通过程序，让计算机输出下面那句鲁迅先生的话要怎么办呢？ 然而也有经过许多人经验之后，倒给了后人坏影响的，如俗语说“各扫自家门前雪，莫管他人瓦上霜”的便是其一。 细心的同学已经发现了，这句话中间已经有了一对双引号。会不会跟定义字符串变量过程中的那一对双引号冲突呢？ 如： a = \"然而也有经过许多人经验之后，倒给了后人坏影响的，如俗语说\"各扫自家门前雪，莫管他人瓦上霜\"的便是其一。\" 显然，我们已经能从上述示例代码中看出些问题，那放到程序里运行会是什么样呢？ 如上图：程序并没有运行，并出席了红色的错误提示，如SyntaxError 那么为什么会发生这样的情况呢？其实原因就在于，出现了两对双银行，计算机这小子笨蛋它懵逼了。 计算机看到程序里的两对双音号，它直接懵逼&#x1F628;，这是什么鬼&#x1F631;，到底哪个双引号里是这个字符串类型变量a的值&#x1F62D;？ 那遇到这种状况，我们怎么处理呢？别急，Python的设计人员早就为我们想到了，因此，这个时候我们需要认识Python编程语言中的另一个元素了——转义字符 1.3.1. 转义字符 转义字符，就是对一些特殊字符进行转义处理。如\"\"双引号，在Pyhton中一般的意义就是告诉计算机，这中间是一个字符串类型的变量值。但难免出现变量值中饱含一对双引号。那要怎么办呢？这个时候，我们就需要通过转义字符，转变值中双引号的意义，告诉计算机，这里面的这一对双引号是变量值的一部分，那么怎么操作呢？其实也很简单，就是在要转义的字符前加一个“\\”由上向下的反斜杠。如： a = \"然而也有经过许多人经验之后，倒给了后人坏影响的，如俗语说\\\"各扫自家门前雪，莫管他人瓦上霜\\\"的便是其一。\" print(a) 如下图： 但这个时候图中的内容太长了，看着不方便，我们能不能给他中间换个行，分两行显示呢？ 如： a = \"然而也有经过许多人经验之后，倒给了后人坏影响的， 如俗语说\\\"各扫自家门前雪，莫管他人瓦上霜\\\"的便是其一。\" print(a) 其实从上面的示例中，我们也已经能够看出来，这样一定是有问题的。那实际运行呢？ 结果又报错了，我们只是简单的换个行诶，这对计算机很难嘛？为什么这它都要报错&#x1F914;。 显然，计算机比我们想象的要笨很多，它不懂我们聪明的人类，直接在键盘上敲个回车键的换行。但我们又需要换行，怎么办呢？别急，这个时候，还是转义字符。让转义字符帮我们换行。这次要用到什么呢？“\\n”，我们通过“\\”反斜杠，将小写字母的n转义。这个时候，转义后的n就是我们编程语言中的“换行了”，不信我们试试看～ a = \"然而也有经过许多人经验之后，倒给了后人坏影响的，\\n如俗语说\\\"各扫自家门前雪，莫管他人瓦上霜\\\"的便是其一。\" print(a) 上图： 果然，在我们添加了转义字符的地方换行了。而且没有报错哟！ 下面，介绍几个常见的转义字符： 转义字符 说明 \\\\ 反斜杠号 \\\" 双引号 \\' 单引号 \\n 换行 1.4. 布尔类型 在我们日常信息传递中，除了文本、数字，我们往往还要进行判断，于是乎，我们就有了“是、否”，“确定、取消”，而计算机当中，也有这些，那么是什么呢？计算机可不像我们，能搞出那么多的花样，但是计算机也有最基本的，即我们现在要了解到的布尔值类型，即布尔逻辑。就如同我们日常生活中遇到的“杠精”们，他们不就要么是，要么不是嘛。巧了，我们的计算机也是这样一个杠精。就像我们现在骂人说杠精是二极管思维。巧了，计算机还真就是由二极管演化出来的，可是个名副其实的真·二极管！那说了这么多，计算机又是如何表达我们的“是、否”，“好、坏”，其实就是我们的布尔类型，像前面，我们已经了解到的那些变量类型一样，变量值和变量类型之间，往往有着对应的关系。我们不妨来复习一下 值内容 对应的变量类型 整数，如：1314，520，-2021 int，整数 小数，如：3.1415926，99.999999 float，浮点数 单个或多个字符在一起，如：我爱你三千遍，Python str，字符串 那么：True，False 这又是什么呢？ 这就是布尔（bool）类型，它的值是两个规定的值，分别为True和False，和我们日常见到的“杠精”们一样，布尔类型的值，是要么True，要么False。不能是别的。 听起来很迷糊？没关系，别怕，我们可以通过一个程序演示来理解一下。 还是传统艺能，废话不多说，先上代码，再上图。 其实，这就跟我们向女神表白一样： import random a = 0 while a 上图： 就像图中一样，布尔类型的变量，要么值为True，要么为False。一般像我们需要计算机做真、假，对、错，是、非判断的时候，我们就需要用到它。同样，当我们的程序需要进行做判断的时候，就可以想到我们的布尔类型，通过我们的布尔类型的变量来进行问题的解决。这里先简单的了解一下，后面我们遇到具体的问题的时候再做具体的说明。 在这个示范的代码中，不知到大家有没有发现，中间有一句是这样的： print(\"此时变量biaobai的值为：\" + str(biaobai)) 变量被括号括了起来，前面还有一个字符串类型的“标识符”——“str”。 这是为什么呢？为什么要这样呢？ 首先：我们要知道和注意的是，当print输出字符串的时候，必须保证内容全部都是字符串，只要其中有一个内容是字符串，我们剩下就必须都是字符串。 那这个时候就麻烦了，我们的变量“biaobai”是“bool”布尔类型的变量要怎么办呢？不要着急，不要惊慌，该来的总会来&#x1F436;狗头保命！不过该来的确实来了，这一点在Python的设计者那里也考虑到了，这怎么办呢？总不能只许州官放火，不许百姓点灯吧？都是一样的变量，我们int，float和bool，都不配被输出了嘛？那是不可能的，计算机虽然是真·二极管，可我们人类不是呀，因此，当然不能这么双标。int、float和bool还是一样可以被输出出来，只是，我们需要给它变一变，那么怎么变呢？这个时候就需要我们下面要讲到的类型转换了 1.5. 类型转换 计算机在人的加持下虽然很“聪明”，但没有人类的智慧加持，它真的不行，就像在用print输出的时候，只要是字符串的输出，它就必须要全都统一称字符串，原因也很简单，为了不出错。它没我们人聪明，类型太复杂，它把持不住呀。那别的类型的值，要想输出or进一步处理的的话，就必须先将其转化成合适的类型。就像，我们在前面要想输出一个布尔类型的值，就要先把它转成str字符串类型的。像这种print语法要求的情况下需要我们考虑类型转换。那么还有什么情况需要我们考虑变量类型之间的转换呢？ 还是我们的传统艺能：先上代码，再上图 xiaomingAge = input(\"请输入小明的年龄\") xiaoqiangAge = input(\"请输入小强的年龄\") print(\"小明和小强的年龄之和为：\", xiaomingAge + xiaoqiangAge) 大家猜猜看结果会是什么样？不卖关子，上图了： 惊不惊喜，意不意外，两个10岁相加后是1010。 这是为什么呢？在这里，我们就要说一下了，input，不管我们输入什么，它们一律会按我们输入的是字符串，来存如变量。因此，这个时候，两个字符串的10，相加，自然就是它们字符的累加，就是1010。 同时，这里教大家一个小技巧，当我们不确定一个变量是什么类型的时候可以通过下面的方式来获取变量类型： print(type(变量名)) 这样就可以查看到它的变量类型了。我们可以到我们闹了笑话里的代码里试一试，看一看，是不是像上面说的那样： # 出了问题，闹了笑话怎么办呢？ xiaomingAge = input(\"请输入小明的年龄\") xiaoqiangAge = input(\"请输入小强的年龄\") print(type(xiaomingAge), type(xiaoqiangAge)) # 检查一下是不是像所说的那样，input的内容都是字符串 上图： 果然，和我们说的没错，那要让它们进行一个数字的加法怎么办呢？这个时候，我们就需要把它们都转成数字类型，就可以得到我们的想要的结果啦，那怎么转呢？先上代码，再上图： xiaomingAge = input(\"请输入小明的年龄\") xiaoqiangAge = input(\"请输入小强的年龄\") print(\"小明和小强的年龄之和为：\", int(xiaomingAge) + int(xiaoqiangAge)) 上图： 看，在我们人类智慧的加持下，计算机它终于学会了怎么算10+10，&#x1F436; 当然，还会有别的情况，那就等我们将来遇到，再具体问题具体分析吧。这里，我们需要记住的是print，输出的字符串的时候，要都是字符串，input在进行输入的时候，它的值类型是str字符串。当变量需要进行数学运算时，它们的值类型必须是数字类型。下面，我们来简单说一下，转换时的操作： 要转换的目标类型（要转换的变量名称） 如： str(a) # 同理，要把a转换成别的字符串类型就按照上面的方式进行，如下： int(a) float(a) ⚠️注意：在字符串转数字前，我们先要确定字符串里的内容符合数字类型。不要把文字或字母字符也去转数字。 以上，就是变量初步的全部内容，随着，我们学习的深入，在未来还会有其他变量，目前，先以上面的这些基本的变量类型为主。大家要多多练习哟！加油鸭！ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-03 23:45:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"doc/Unit01-初识/L7运算符初步/运算符初步.html":{"url":"doc/Unit01-初识/L7运算符初步/运算符初步.html","title":"L7运算符初步","keywords":"","body":"1. 运算符初步1.1. 算术运算符1.2. 赋值运算符1.3. 比较（关系）运算符1. 运算符初步 在了解了输入输出、变量类型、编码规范等之后，我们现在来学习本单元最后一讲的内容，运算符的初步。 说了很久的计算机，计算机，它肯定是要计算的。那么它都能进行那些计算呢？又是怎么进行计算的呢？下面我们来具体学习。 首先，运算符就是一些特殊的运算符号，主要用于数学计算、比较大小和逻辑运算等等。Python编程语言中的运算符主要包括算术运算符、赋值运算符、比较（关系）运算符、逻辑运算符和位运算符。用运算符将不同类型的数据按照一定的规则连接起来的式子被称之为“表达式” 用算术运算符连接起来的式子，就是算数表达式，比较（关系）运算符连接起来的就是比较（关系）表达式等。 下面我们先来讲解一些基础的运算符： 1.1. 算术运算符 算术运算符顾名思义，就是处理加减乘除四则运算的，跟我们从小做的加减乘除是一样的。主要用于处理数字。详细的见下表： 运算符 说明 示例 结果 + 加 1+1 2 - 减 1-1 0 * 乘 1*2 2 / 除 9/2 4.5 % 求余，得到的值是余数，即不能被整除的部分 9%2 1 // 取整除，得到的是商的整数部分 9//2 4 ** 幂，得到的是x的y次方 2**3 8 下面我们要注意的是： 1、print可以直接输出表达式的结果，算术运算符也可以直接对数字进行运算，如： print(1+1) print(1-1) print(1*2) print(9/2) print(9%2) print(9//2) print(2**3) 得到的结果为： 2、算术运算符也可以直接对变量进行运算，如： a = 24 b = 13 c = 7 print(a+b+c) print(a-b-c) print(a*b*c) print(a/c) print(a%c) print(b%c) print(a//c) print(b//c) print(c**c) 最后的结果为： 3、Python在进行数学计算时，跟我们学过的现实中的数学一样，也存在优先级，并跟我们一样，都是先算乘除，再算加减，同级运算符是从左到右计算，也可以用（）来调整计算的优先级。 算术运算符的优先级由高到低排列顺序如下： 第一级：** 第二级：*，/，%，// 第三级：+，- 4、再Python中，还可以对字符串进行+或*，前面的示例中我们都用过，现在来正式学习一下。 a = \"我\" b = \"爱\" c = \"你\" d = \"老师罚抄写的课文\" print(a + b + c) # 当+加号，用于字符串，就是把字符串按顺序拼接起来 print(d * 3) # 当*乘号，用于字符串时，就是把字符串相乘次数，输出出来 如图所示： 大家可以在编写程序的过程中，根据我们的实际需求，灵活运用。 1.2. 赋值运算符 赋值运算符主要用于为变量等进行赋值操作。要给的变量或对象在“=”等号的左边，要给的“值”则在右边。常见的赋值运算符详见下表： 运算符 说明 例子 展开式 = 把右边的值给左边 x=y x=y += 把左边本身的值与右边相加后给左边 x+=y x=x+y -= 把左边本身的值与右边相减后给左边 x-=y x=x-y *= 把左边本身的值与右边相乘后给左边 x*=y x=x*y /= 把左边本身的值与右边相除后给左边 x/=y x=x/y %= 把左边本身的值与右边取余后给左边 x%=y x=x%y //= 把左边本身的值与右边取整数后给左边 x//=y x=x//y **= 把左边本身的值的右边值次幂给左边 x**=y x=x**y 放在代码中就如下所示： a = 24 b = 13 c = 7 a = a + b print(a) # 此时的a被重新赋予了a+b的值，即24+13=37 print(24+13) a += c print(a) # 此时的a被重新赋予了在重新赋值后的37+c的值，即37+7=44 print(37+7) a -= b print(a) # 此时的a被重新赋予了在重新赋值后的44-b的值，即44-13=31 print(44-13) a *= b print(a) # 此时的a被重新赋予了在重新赋值后的31*b的值，即31*13=403 print(31*13) a /= b print(a) # 此时的a被重新赋予了在重新赋值后的403/b的值，即403/13=31 print(403/13) a %= c print(a) # 此时的a被重新赋予了在重新赋值后的31%c的值，即31%7=3 print(31%7) a **= c print(a) # 此时的a被重新赋予了在重新赋值后的3的c次幂的值，即3**7=2187 print(3**7) a //= c print(a) # 此时的a被重新赋予了在重新赋值后的2187//c的值，即2187//7=44 print(2187//7) 结果如下所示： 大家可以在编写程序的过程中，根据我们的实际需求，灵活运用。 1.3. 比较（关系）运算符 比较运算符，也可称作是关系运算符，正如同比较是一种关系一样。用来对关系符左右的变量或表达式的结果进行基于运算符的判断，其结果一般为符合运算符关系的，则为真，值为True，不符合的，则为假，值为False。这些运算符跟我们数学中学过的也类似，具体见下表： 运算符 说明 举例 结果（值） > 大于 1>2 False 小于 1 True == 相等 \"Nice\" == \"Nice\" True != 不相等 \"Nice\" != \"nice\" True >= 大于或等于 1>=2 False 小于或等于 1 True 在代码中如下： print(1>2) print(1=2) print(1 结果如下图： 其中，==与!=，除了可以判断数字，也可以用来判断字符串是否一致，我们经常登陆填写验证码时和输入完密码进行验证时，用的就是这样的方法哟，是不是很有趣，奇怪的知识增加了呢！ 我们不难发现，比较之后的值都是布尔类型的值。这也是为什么前面我们讲到布尔类型时说它们主要用于判断，而比较关系运算符也会在后面讲到判断时大量使用。希望大家能将前面讲过的全部内容都多多练习，一起加油鸭！ 最后，恭喜你，已经完成了第一个单元的学习，对Python的掌握也更加深入了呢。可以更好的继续后面的学习了，不过前面的内容还是要多加练习哟，基础要牢，后面才能飞的稳，飞的远。另外每讲后面都配有：牛逼普拉斯的练习，上手手册，知识清单。想要更牛逼普拉斯，可以跟着牛逼普拉斯的练习一起练，不知道怎么上手，可以看上手手册，对每一讲的知识有什么疑问，可以看知识清单。我们一起好好学习，天天向上！ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-04 01:17:06 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}